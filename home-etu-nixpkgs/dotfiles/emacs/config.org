#+TITLE: Elis Emacs configuration

* General configuration
** Backup Files
Unless the =$XGD_DATA_DIR/emacs/backup= directory exists, create it. Then set
as backup directory.

#+begin_src emacs-lisp :tangle yes
  (let ((backup-dir (concat user-emacs-data-directory "/backup")))
    (unless (file-directory-p backup-dir)
      (mkdir backup-dir t))

    (setq backup-directory-alist (cons (cons "." backup-dir) nil)))
#+end_src

** Lock-files
Disable creation of lock-files named =.#<filename>=.

#+begin_src emacs-lisp :tangle yes
  (setq create-lockfiles nil)
#+end_src

** auto-save-list file
Move =auto-save-list= files to =$XDG_CACHE_DIR=.

#+begin_src emacs-lisp :tangle yes
  (setq auto-save-list-file-prefix
        (concat user-emacs-cache-directory "/auto-save-list/saves-"))
#+end_src

** Custom vars
#+begin_src emacs-lisp :tangle yes
  (setq indent-tabs-mode nil              ; Always indent with spaces
        mouse-yank-at-point t             ; Paste at cursor, not at mouse
        show-trailing-whitespace t        ; Highlight trailing whitespaces
        calendar-week-start-day 1 )       ; Weeks starts on Mondays
  (setq-default tab-width 4)              ; Set tab-size to 4 spaces
#+end_src

** Miscellaneous stuff
#+begin_src emacs-lisp :tangle yes
  ;; Automagic indent on newline
  (global-set-key "\C-m" 'newline-and-indent)

  ;; Make sure that there is one newline at the end of the file while saving,
  ;; also removes all spaces at the end of lines.
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Change all yes-or-no-p to y-or-n-p
  (defalias 'yes-or-no-p 'y-or-n-p)

  (add-hook 'emacs-startup-hook
            (lambda ()
              ;; Auto reread from disk when file changes
              (global-auto-revert-mode t)

              ;; Enable line highlight mode everywhere
              (global-hl-line-mode 1)

              ;; Disable line wrapping where the window ends
              (toggle-truncate-lines t)))
#+end_src

** Theme
#+begin_src emacs-lisp :tangle yes
  (use-package zerodark-theme
    :config
    (progn
      (load-theme 'zerodark t)
      (zerodark-setup-modeline-format)))
#+end_src

** [[https://stackoverflow.com/questions/3984730/emacs-gui-with-emacs-daemon-not-loading-fonts-correctly][Set font]]
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'default-frame-alist '(font . "Liberation Mono 10"))
#+end_src

** [[https://emacs.stackexchange.com/questions/13291/emacs-cursor-color-is-different-in-daemon-and-non-daemon-modes][Cursor color]]
#+begin_src emacs-lisp :tangle yes
  (use-package frame
    :defer 2
    :config
    (progn
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (modify-frame-parameters
                   frame (list (cons 'cursor-color "White")))))))
#+end_src

** UI Elements
#+begin_src emacs-lisp :tangle yes
  (add-hook 'emacs-startup-hook
            (lambda ()
              (menu-bar-mode -1)         ; Hide menubar
              (tool-bar-mode -1)         ; Hide toolbar

              (if (boundp 'scroll-bar-mode)
                  (scroll-bar-mode -1))   ; Hide scrollbar

              (show-paren-mode t)      ; Highlight parenthesises
              (column-number-mode t))) ; Enable column number in newline

  (setq inhibit-startup-screen t) ; Hide startup screen
#+end_src

** Linum mode
Enable linum mode to show line-numbers
#+begin_src emacs-lisp :tangle yes
  (setq linum-format "%3d ")
  (add-hook 'prog-mode-hook 'linum-mode)
#+end_src

** Unbind suspend frame
Unbind the keys for suspending emacs, these are terrible to hit when using a
graphical emacs.

#+begin_src emacs-lisp :tangle yes
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z"))
#+end_src

** Beginning of line
C-a is revised to go to first char of the line, ignoring initial whitespace
and on second run go to the real begining of the line.

#+begin_src emacs-lisp :tangle yes
  (defun my/move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

     Move point to the first non-whitespace character on this line.
     If point is already there, move to the beginning of the line.
     Effectively toggle between the first non-whitespace character and
     the beginning of the line.

     If ARG is not nil or 1, move forward ARG - 1 lines first.  If
     point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'my/move-beginning-of-line)
#+end_src

* Major modes
** Go mode                                                               :go:
#+begin_src emacs-lisp :tangle yes
  (use-package go-mode
    :defer 2
    :config
    (progn
      (add-hook 'before-save-hook 'gofmt-before-save)))
#+end_src

** PHP mode                                                             :php:
Install PHP-mode, set coding style and add a hook to load flymake.

#+begin_src emacs-lisp :tangle yes
  (use-package php-mode
    :defer 2
    :config
    (setq php-mode-coding-style 'psr2))
#+end_src

** SCSS mode                                                           :scss:
Disable compile at save since I rarely have ruby installed.

#+begin_src emacs-lisp :tangle yes
  (use-package scss-mode
    :defer 2
    :config
    (setq scss-compile-at-save nil))
#+end_src

** Web Mode                                                             :web:
Install web-mode, set rules for filetypes and indent.

#+begin_src emacs-lisp :tangle yes
  (use-package web-mode
    :defer 2
    :mode "\\.twig$"
    :mode "\\.html$"
    :config
    (progn
      (setq web-mode-markup-indent-offset 4) ; HTML
      (setq web-mode-css-indent-offset 4)    ; CSS
      (setq web-mode-code-indent-offset 4))) ; JS/PHP/etc
#+end_src

** Rest Client                                                   :restclient:
#+begin_src emacs-lisp :tangle yes
  (use-package restclient
    :defer 2
    :mode "\\.rest$"
    :config
    (progn
      ;; Add hook to override C-c C-c in this mode to stay in window
      (add-hook 'restclient-mode-hook
                '(lambda ()
                   (local-set-key
                    (kbd "C-c C-c")
                    'restclient-http-send-current-stay-in-window)))))
#+end_src

* Company mode and backends                                         :company:
#+begin_src emacs-lisp :tangle yes
  (use-package company
    :defer 2
    :diminish company-mode
    :bind ("<backtab>" . company-complete)
    :config
    (progn
      ;; TODO: Keybind company-complete to something good

      ;; Make the tooltip behave well
      (setq company-tooltip-minimum-width 15
            company-idle-delay 0.1)

      (global-company-mode)))
#+end_src

** Fuzzy Matching                                                       :flx:
#+begin_src emacs-lisp :tangle yes
  (use-package company-flx
    :defer 2
    :config
    (progn
      (with-eval-after-load 'company
        (company-flx-mode +1))))
#+end_src

** Statistics for completions                                    :statistics:
#+begin_src emacs-lisp :tangle yes
  (use-package company-statistics
    :defer 2
    :config
    (progn
      (setq company-statistics-file
            (concat user-emacs-data-directory "/company-statistics.dat"))
      (company-statistics-mode)))
#+end_src

** Restclient Mode                                               :restclient:
#+begin_src emacs-lisp :tangle yes
  (use-package company-restclient
    :defer 2
    :config
    (progn
      (add-hook 'restclient-mode-hook
                (lambda ()
                  (set (make-local-variable 'company-backends)
                       '(company-restclient))

                  (company-mode t)))))
#+end_src

** PHP                                                                  :php:
Utilizes the program =ctags= in the background. Available in pacman.

#+begin_src emacs-lisp :tangle yes
  (use-package company-php
    :defer 2
    :config
    (progn
      (require 'php-mode)

      (setq ac-php-tags-path (concat user-emacs-cache-directory "/ac-php"))

      (add-hook 'php-mode-hook
                '(lambda ()
                   (unless (executable-find "ctags")
                     (error "Program: ctags is missing"))

                   ;; Add build company-backends with dabbrev and ac-php
                   (set (make-local-variable 'company-backends)
                        '((company-dabbrev-code
                           company-gtags
                           company-etags
                           company-keywords
                           company-ac-php-backend)))

                   (company-mode t)))

      (define-key php-mode-map (kbd "C-]") 'ac-php-find-symbol-at-point)
      (define-key php-mode-map (kbd "C-t") 'ac-php-location-stack-back)))
#+end_src

** go                                                                    :go:
Utilizes the program =gocode= as backend. Available in AUR as =gocode-git=.

#+begin_src emacs-lisp :tangle yes
  (use-package company-go
    :defer 2
    :config
    (progn
      (add-hook 'go-mode-hook
                (lambda ()
                  (unless (executable-find "gocode")
                    (error "Program: gocode is missing"))

                  (set (make-local-variable 'company-backends) '(company-go))
                  (company-mode t)))))
#+end_src

** Jedi                                                              :python:

#+begin_src emacs-lisp :tangle no
  (add-hook 'python-mode-hook
            '(lambda ()
               (add-to-list 'company-backends 'company-jedi)
               (company-mode t)))
  (setq jedi:setup-keys t
        jedi:complete-on-dot t)
#+end_src

* Utilities                                                           :utils:
** Anzu                                                        :anzu:replace:
Enables interactive replacing in emacs.
#+begin_src emacs-lisp :tangle yes
  (use-package anzu
    :defer 2
    :bind (("M-%" . anzu-query-replace)
           ("C-M-%" . anzu-query-replace-regexp)))
#+end_src

** Git frontend                                                       :magit:
Install magit, bind =C-x g= to display the main magit popup and bind
=C-x M-g= to display a magit popup with keybinds used in magit.

#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :defer 2
    :bind (("C-x g" . magit-status)     ; Display the main magit popup
           ("C-x M-g" . magit-dispatch-popup)) ; Display keybinds for magit
    :config
    (progn
      (setq magit-log-arguments
            '("--graph" "--color" "--decorate" "--show-signature" "-n256"))))
#+end_src

** Flycheck                                                        :flycheck:
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
    :defer 2
    :diminish flycheck-mode
    :config
    (progn
      (setq flycheck-phpcs-standard "PSR2"
            flycheck-php-phpcs-executable "phpcs")

      (global-flycheck-mode)))
#+end_src

** Simple layouts                                                  :0blayout:
#+begin_src emacs-lisp :tangle yes
  (use-package 0blayout
    :defer 2
    :config
    (progn
      (0blayout-mode t)
      (setq 0blayout-default "code")))
#+end_src

** Eyebrowse
#+begin_src emacs-lisp :tangle yes
  (use-package eyebrowse
    :defer 2
    :config
    (progn
      (setq eyebrowse-new-workspace t)
      (eyebrowse-mode)))
#+end_src

** webpaste                                                           :paste:
Paste whole buffers or parts of buffers to the internet.

#+begin_src emacs-lisp :tangle yes
  (use-package webpaste
    :defer 2
    :bind (("C-c C-p C-b" . webpaste-paste-buffer)
           ("C-c C-p C-r" . webpaste-paste-region)))
#+end_src

** Snippets / Templates                                           :yasnippet:
Using Yasnippet (Yet Another Snippet Extension) for snippets/templates.

#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :defer 2
    :diminish yas-minor-mode
    :config
    (progn
      (let ((yas-dir (concat user-emacs-data-directory "/snippets")))
        (unless (file-directory-p yas-dir)
          (mkdir yas-dir t))

        (setq yas-snippet-dirs
              (cons yas-dir '(yas-installed-snippets-dir))))

      (yas-global-mode 1)))
#+end_src

** Guide for keybinds                                             :which:key:
#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :defer 2
    :diminish which-key-mode ;; Seems to be broken at the moment though
    :config
    (progn
      (which-key-mode 1)))
#+end_src

** Smooth scrolling                                        :smooth:scrolling:
This package makes Emacs scroll before cursor reach top or bottom which makes
scrolling smoother.

#+begin_src emacs-lisp :tangle yes
  (use-package smooth-scrolling
    :defer 2
    :config
    (progn
      (setq smooth-scroll-margin 2)
      (smooth-scrolling-mode)))
#+end_src

** Show diff inline                                                 :diff:hl:
#+begin_src emacs-lisp :tangle yes
  (use-package diff-hl
    :defer 2
    :config
    (progn
      (global-diff-hl-mode)))
#+end_src

** Long lines highlight                                      :column:enforce:
Also add hook to alter the limit to 77 chars for org-mode since ORG tags is
located so the last character is at 76. And it looks nice to have it all
aligned up.

Also add a hook to use 120 as limit for php-mode since PSR-2 states that this
is the limit for php-files.

#+begin_src emacs-lisp :tangle yes
  (use-package column-enforce-mode
    :defer 2
    :config
    (progn
      (face-spec-set column-enforce-face '((t (:background "dark red"))))

      ;; Make/Add hooks
      (add-hook 'prog-mode-hook 'column-enforce-mode)
      (add-hook 'php-mode-hook (make-column-rule 120))
      (add-hook 'org-mode-hook (make-column-rule 77))))
#+end_src

** Geben                                                    :DBGp:xdebug:php:
Enables interactive remote debugging of PHP in Emacs.
#+begin_src emacs-lisp :tangle yes
  (use-package geben
    :defer 2
    :config
    (progn
      (setq geben-temporary-file-directory
            (concat user-emacs-cache-directory "/geben"))))
#+end_src

** Direnv
Enables support for direnv environment variables.
#+begin_src emacs-lisp :tangle yes
  (use-package direnv
    :defer 1
    :config
    (direnv-mode))
#+end_src

* Helm                                                                 :helm:
#+begin_src emacs-lisp :tangle yes
  (use-package helm
    :defer 2
    :diminish helm-mode
    :bind (("C-x C-f" . helm-find-files)
           ("M-x" . helm-M-x)
           ("C-x b" . helm-mini)
           ("C-x C-b" . helm-mini)
           ("M-y" . helm-show-kill-ring)
           :map helm-map
           ("<tab>" . helm-execute-persistent-action) ; Rebind TAB to expand
           ("C-i" . helm-execute-persistent-action) ; Make TAB work in CLI
           ("C-z" . helm-select-action)) ; List actions using C-z
    :config
    (progn
      (setq helm-split-window-in-side-p t)
      (helm-mode 1)))
#+end_src

** Helm Projectile                                            :projectile:ag:
#+begin_src emacs-lisp :tangle yes
  (use-package helm-projectile
    :defer 2
    :bind (("C-x , p" . helm-projectile-switch-project)
           ("C-x , f" . helm-projectile-find-file)
           ("C-x , b" . projectile-ibuffer)
           ("C-x , i" . projectile-invalidate-cache)
           ("C-x , a" . helm-projectile-ag)
           ("C-x , k" . projectile-kill-buffers))
    :config
    (progn
      (projectile-mode)
      (setq projectile-enable-caching t)))
#+end_src

** Helm fuzzier                                                       :fuzzy:
#+begin_src emacs-lisp :tangle yes
  (use-package helm-fuzzier
    :defer 2
    :config
    (progn
      (setq helm-mode-fuzzy-match t
            helm-M-x-fuzzy-match t
            helm-buffers-fuzzy-match t
            helm-recentf-fuzzy-match t)

      (helm-fuzzier-mode 1)))
#+end_src

* Org                                                                   :org:
Highlight code in native language in code-blocks in org-files.

#+begin_src emacs-lisp :tangle yes
  (setq org-src-fontify-natively t)
#+end_src

** Note capturing                                                   :capture:
Define =org-files/directories=, templates for org-capturing of notes.
[[http://pages.sachachua.com/.emacs.d/Sacha.html#unnumbered-56][More examples of templates here]].

#+begin_src emacs-lisp :tangle yes
  (use-package org
    :defer 2
    :bind ("M-n" . org-capture)
    :config
    (progn
      (setq org-directory (concat (getenv "HOME") "/org")
            org-default-notes-file (concat org-directory "/notes.org"))

      (setq org-capture-templates
            '(("n" "Quick Notes" entry
               (file+headline org-default-notes-file "Quick Notes")
               "* %^{Note}")
              ("i" "IX Notes" entry
               (file+headline (concat org-directory "/ix.org") "IX Notes")
               "* %^{Note}")))))
#+end_src

** Workhour Clocking                                             :clocktable:
#+begin_src emacs-lisp :tangle yes
  (use-package org
    :defer 2
    :config
    (progn
      ;; This changes formating of time in clocktables
      ;; So instead of "Dd HH:MM" we get "HH.MM"
      (setq org-time-clocksum-use-fractional t)


      ;; Add advice to override indention
      ;; Define function to re-do indent of items in clocktable
      ;; http://emacs.stackexchange.com/a/9544
      (advice-add
       'org-clocktable-indent-string
       :override (lambda (level)
                   (if (= level 1)
                       ""
                     (let ((str " "))
                       (while (> level 2)
                         (setq level (1- level)
                               str (concat str "-")))
                       (concat str "- ")))))))
#+end_src

** Graphs                                                           :gnuplot:
#+begin_src emacs-lisp :tangle yes
  (use-package gnuplot
    :defer 2
    :bind (("M-C-g" . org-plot/gnuplot)))
#+end_src

** Stylesheets / Header                                             :publish:
Shamelessly ripped from [[http://bettermotherfuckingwebsite.com/][Better Motherfucking Website]] and altered to make code
fit better.

#+begin_src emacs-lisp :tangle yes
  (setq-default org-html-head "<style type=\"text/css\">body{margin:40px auto
                               ;max-width:920px; line-height:1.6;
                               font-size:18px; color:#444; padding:0 10px}
                               h1,h2,h3{line-height:1.2}</style>")
#+end_src

* Functions
** Three-column-layout
#+begin_src emacs-lisp :tangle yes
  (defun three-column-layout ()
    "Split into three equaly sized columns"
    (interactive)
    (let ((new-size (/ (window-total-width) 3)))
      (split-window-right new-size)
      (other-window 1)
      (split-window-right new-size)
      (other-window -1)

      (message "Splitted to three-column-layout")))
#+end_src

** Toggle color theme
#+begin_src emacs-lisp :tangle yes
  (if (string= window-system "x")
      (progn
        (defun toggle-color-theme ()
          (interactive)
          (if (equal (car custom-enabled-themes) 'tango-dark)
              (load-theme 'adwaita)
            (load-theme 'tango-dark)))

        (global-set-key [f12] 'toggle-color-theme)))
#+end_src

** PHP Generate constructor                                             :php:
#+begin_src emacs-lisp :tangle yes
  (defun my/php-constructor ()
    "Function that searches trough the buffer and locates all Class
  Dependendencies in a PHP Class and creates a __construct for the class"
    (interactive)

    ;; Go to beginning of buffer
    (goto-char (point-min))

    (let ((injections '())
          (dep-count (how-many "@var\s+"))
          point)

      ;; Loop the amount of times we found @var\s+ to collect the deps
      (dotimes (i dep-count)
        (add-to-list 'injections (my/php-find-injection)))

      ;; Move to end of line
      (move-end-of-line nil)

      ;; Make newlines for new constructor
      (newline)
      (newline)

      ;; Save point
      (setq point (point))

      ;; Insert constructor
      (insert "public function __construct(")
      (newline)

      ;; Insert constructor signature
      (dolist (injection injections)
        (insert (concat (car injection) " "))
        (insert (concat "$" (cdr injection) ","))
        (newline))

      ;; Remove the last newline and ,
      (delete-char -2)

      ;; Then create a new newline
      (newline)

      ;; Insert params
      (insert ") {")
      (newline)

      ;; Insert function content
      (dolist (injection injections)
        (insert (concat "$this->"
                        (cdr injection)
                        " = $"
                        (cdr injection)
                        ";"))
        (newline))

      ;; End function
      (insert "}")

      (indent-region point (point))))

  (defun my/php-find-injection ()
    "Function that locates an Class Dependency in a PHP class"
    (let (pt php-class-name php-var-name)
      (search-forward-regexp "@var\s+")   ; Search for docblock
      (setq pt (point))                   ; Save point
      (skip-chars-forward "-_A-Za-z0-9")  ; Go to end of classname

      ;; Save classname to var
      (setq php-class-name (buffer-substring-no-properties pt (point)))

      (search-forward-regexp "private \\$") ; Search for variable
      (setq pt (point))                   ; Save point
      (skip-chars-forward "-_A-Za-z0-9$") ; Go to end of variable name

      ;; Save variable name to var
      (setq php-var-name (buffer-substring-no-properties pt (point)))

      (cons php-class-name php-var-name)))
#+end_src

* Work utilities
#+begin_src emacs-lisp :tangle yes
  (let ((work-lisp-dir (expand-file-name "tvnu/.lisp" (getenv "HOME"))))
    (if (file-directory-p work-lisp-dir)
        (progn
          ;; Add work lisp dir to load path
          (add-to-list 'load-path work-lisp-dir)

          (require 'work-init))))
#+end_src
